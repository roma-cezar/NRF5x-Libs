#if defined (NRF51822)
		#include "nrf51.h"
		#include "nrf51_bitfields.h"
#elif defined (NRF52832)
		#include "nrf52.h"
		#include "nrf52_bitfields.h"
#endif
#include "boards.h"
#include "nrf.h"
#include "nrf_delay.h"
#include "eSERIAL.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

uint8_t eSERIAL_TXBUFF[MAX_USART_BUFFER];
uint8_t eSERIAL_RXBUFF[MAX_USART_BUFFER];
	


bool tx_end_flag = false;
bool rx_end_flag = false;

uint16_t rx_len = 0;
uint16_t tx_len = 0;


bool uart_err_flag = false;
bool end_flag = false;

#if defined (NRF51822)
void UART0_IRQHandler(void)
#elif defined (NRF52832)
void UARTE0_UART0_IRQHandler(void)
#endif
{
	if(NRF_UARTE0->EVENTS_ENDTX)
	{
		NRF_UARTE0->EVENTS_ENDTX = 0;
		tx_end_flag = true;
	}
	
	if(NRF_UARTE0->EVENTS_RXDRDY)
	{
		NRF_UARTE0->EVENTS_RXDRDY = 0;
		rx_len++;
		rx_end_flag = true;
	}
	
//	if(NRF_UARTE0->EVENTS_ENDRX)
//	{
//			NRF_UARTE0->EVENTS_ENDRX = 0;
//			NRF_UARTE0->TASKS_FLUSHRX = 1;
//			end_flag = true;
//	}
//	if(NRF_UARTE0->EVENTS_RXTO)
//	{
//			NRF_UARTE0->EVENTS_RXTO = 0;
//	}
	if(NRF_UARTE0->EVENTS_ERROR)
	{
		NRF_UARTE0->EVENTS_ERROR = 0;
		uart_err_flag = true;
	}
}

void Flush(uint8_t *buff, uint16_t len)
{
	memset(buff, 0, len);
}

void eSERIAL_Init(uint32_t baud)
{
	//NRF_UARTE0->
	NRF_UARTE0->PSEL.RXD = RX_PIN_NUMBER; 
	NRF_UARTE0->PSEL.TXD = TX_PIN_NUMBER;
	

	NRF_UARTE0->CONFIG = UARTE_CONFIG_HWFC_Disabled | UARTE_CONFIG_PARITY_Excluded;

	switch(baud){
		case 1200:
			NRF_UART0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud1200; 
			break;
		case 2400:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud2400; 
			break;
		case 4800:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud4800; 
			break;
		case 9600:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud9600; 
			break;
		case 19200:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud19200; 
			break;
		case 38400:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud38400; 
			break;
		case 57600:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud57600; 
			break;
		case 115200:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud115200;
			break;
		case 230400:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud230400; 
			break;
		case 460800:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud460800; 
			break;
		case 921600:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud921600; 
			break;
		case 1000000:
			NRF_UARTE0->BAUDRATE = UARTE_BAUDRATE_BAUDRATE_Baud1M; 
			break;
	}
	
	
		memset(eSERIAL_RXBUFF, 0, MAX_USART_BUFFER);
		memset(eSERIAL_TXBUFF, 0, MAX_USART_BUFFER);
	
		NRF_UARTE0->TXD.PTR = (uint32_t)(eSERIAL_TXBUFF);
		NRF_UARTE0->TXD.MAXCNT = (uint32_t)MAX_USART_BUFFER-1;
	
		NRF_UARTE0->RXD.PTR = (uint32_t)(eSERIAL_RXBUFF);
		NRF_UARTE0->RXD.MAXCNT = (uint32_t)MAX_USART_BUFFER-1;
	
		NRF_UARTE0->INTENCLR = 0xFFFFFFFF;
		NRF_UARTE0->INTENSET = UARTE_INTENSET_RXDRDY_Enabled << UARTE_INTENSET_RXDRDY_Pos;
		NRF_UARTE0->INTENSET = UARTE_INTENSET_ENDTX_Enabled << UARTE_INTENSET_ENDTX_Pos;
//		NRF_UARTE0->INTENSET = UARTE_INTENSET_ENDRX_Enabled << UARTE_INTENSET_ENDRX_Pos;
//	  NRF_UARTE0->INTENSET = UARTE_INTENSET_RXTO_Enabled << UARTE_INTENSET_RXTO_Pos;
	  NRF_UARTE0->INTENSET = UARTE_INTENSET_ERROR_Enabled << UARTE_INTENSET_ERROR_Pos;
		NRF_UARTE0->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
		
	#if defined (NRF51822)	
		NVIC_ClearPendingIRQ(UART0_IRQn);
		NVIC_SetPriority(UART0_IRQn, 3);
		NVIC_EnableIRQ(UART0_IRQn);
	#elif defined (NRF52832)
		NVIC_ClearPendingIRQ(UARTE0_UART0_IRQn);
		NVIC_SetPriority(UARTE0_UART0_IRQn, 3);
		NVIC_EnableIRQ(UARTE0_UART0_IRQn);
	#endif
}

void eSERIAL_StartTX(void)
{
	NRF_UARTE0->TASKS_STARTTX = 1;
	while(!NRF_UARTE0->EVENTS_TXSTARTED);
	NRF_UARTE0->EVENTS_TXSTARTED = 0;
}
	
void eSERIAL_StopTX(void)
{
	NRF_UARTE0->TASKS_STOPTX = 1;
	while(!NRF_UARTE0->EVENTS_TXSTOPPED);
	NRF_UARTE0->EVENTS_TXSTOPPED = 0;
	NRF_UARTE0->EVENTS_ENDTX = 0;
}

void eSERIAL_Transmit(uint8_t* data, uint16_t len)
{
	if(len>0)
	{
		memset(eSERIAL_TXBUFF, 0, MAX_USART_BUFFER);
		memcpy((char*)eSERIAL_TXBUFF, data, len);
		memset(data, 0, MAX_USART_BUFFER);
		NRF_UARTE0->TXD.PTR = (uint32_t)(eSERIAL_TXBUFF);
		NRF_UARTE0->TXD.MAXCNT = (uint32_t)len;
		eSERIAL_StartTX();
		while(!tx_end_flag);
		eSERIAL_StopTX();
		tx_end_flag = false;
	}
}

void eSERIAL_StartRX(void)
{	
	NRF_UARTE0->RXD.PTR = (uint32_t)(eSERIAL_RXBUFF);
	NRF_UARTE0->RXD.MAXCNT = (uint32_t)MAX_USART_BUFFER-1;
	NRF_UARTE0->TASKS_STARTRX = 1;
	while(!NRF_UARTE0->EVENTS_RXSTARTED);
	NRF_UARTE0->EVENTS_RXSTARTED = 0;
}
	
void eSERIAL_StopRX(void)
{
	// clear all flags
	NRF_UARTE0->EVENTS_RXDRDY = 0;
	NRF_UARTE0->EVENTS_ENDRX = 0;
	NRF_UARTE0->EVENTS_RXTO = 0;
	NRF_UARTE0->TASKS_FLUSHRX = 1;
	NRF_UARTE0->TASKS_STOPRX = 1;
	rx_len = 0;
}

uint16_t eSERIAL_Recieve(uint8_t* data)
{
	uint16_t length=0;	
	while(!strstr(eSERIAL_RXBUFF, "\r\n"));
	length=rx_len;
	eSERIAL_StopRX();
	memcpy(data, eSERIAL_RXBUFF, length);
	return length;
}

bool ESP8266_AtCmd(uint8_t* databack, uint16_t size, const char* at_cmd, const char* at_answer)
{
	bool   ret = false;
	bool   at_err_flag = false;
	bool   at_busy_flag = false;
	bool   at_ok_flag = false;
	static uint8_t 	dbg_msg[64];
	static uint8_t 	data_buf[64];
	static uint16_t bytes_rx = 0;
	static uint32_t timeout = 0;
	static uint32_t err;
	
	memset(databack, 0, size);
	memset(data_buf, 0, 64);
	memset(dbg_msg,  0, 64);
	
	sprintf(data_buf, "%s\r\n", at_cmd);
	
	sprintf(dbg_msg, "\r\n>>> %s\r\n", data_buf);
	SEGGER_RTT_WriteString(0, (const char*)dbg_msg);
	
	eSERIAL_Transmit(data_buf, strlen(data_buf));
	eSERIAL_StartRX();

	timeout = 5000000;
	while(--timeout && !uart_err_flag)
	{
			if(strstr((const char*)eSERIAL_RXBUFF, at_answer))
			{
				at_ok_flag=true;
				nrf_delay_ms(1); // to recieve all message symbols
				break;
			}
			else if(strstr((const char*)eSERIAL_RXBUFF, "busy"))
			{
				at_busy_flag=true;
				break;
			}
			else if(strstr((const char*)eSERIAL_RXBUFF, "ERROR"))
			{
				at_err_flag=true;
				break;
			}
	}
	bytes_rx = rx_len;
	memset(&eSERIAL_RXBUFF[bytes_rx], 0, MAX_USART_BUFFER - bytes_rx - 1); // to avoid usarte errors 1 and 4
	eSERIAL_StopRX();
	
	if(uart_err_flag){ 
		err = NRF_UARTE0->ERRORSRC;
		sprintf(dbg_msg, "\r\nUSART error! Type: %d\r\n", err);
		SEGGER_RTT_WriteString(0, (const char*)dbg_msg);
	}
	else if(timeout==0){
		SEGGER_RTT_WriteString(0, (const char*)"\r\nAT timeout!\r\n");
	}
	else if(at_err_flag){
		SEGGER_RTT_WriteString(0, (const char*)"\r\nAT error!\r\n");
	}
	else if(at_busy_flag){
		SEGGER_RTT_WriteString(0, (const char*)"\r\nAT busy!\r\n");
	}
	else if(at_ok_flag){
		SEGGER_RTT_WriteString(0, (const char*)"\r\n<<< success!\r\n");
		memcpy(databack, eSERIAL_RXBUFF, MAX_USART_BUFFER);
		memset(eSERIAL_RXBUFF, 0, MAX_USART_BUFFER); // to avoid usarte errors 1 and 4
		at_ok_flag=false;
		ret=true;
	}
	rx_end_flag = false;
	return ret;
	
}