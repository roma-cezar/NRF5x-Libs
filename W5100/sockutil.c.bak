/*
*
@file		sockutil.c
@brief	Implementation of useful function of iinChip
*
*/
#include <stdio.h>
#include <string.h>

#include "util.h"
#include "w5100.h"
#include "socket.h"
#include "sockutil.h"

/**
@brief	Convert 32bit Address(Host Ordering) into Dotted Decimal Format
@return 	a char pointer to a static buffer containing the text address in standard ".'' notation. Otherwise, it returns NULL. 
*/  
/**< Pointer variable to store converted value(INPUT) */
char* inet_ntoa(unsigned long addr)
{
	static char addr_str[16];
	memset(addr_str,0,16);
	sprintf(addr_str,"%d.%d.%d.%d",(int)(addr>>24 & 0xFF),(int)(addr>>16 & 0xFF),(int)(addr>>8 & 0xFF),(int)(addr & 0xFF));
	return addr_str;
}

char* inet_ntoa_pad(unsigned long addr)
{
	static char addr_str[16];
	memset(addr_str,0,16);
	sprintf(addr_str,"%03d.%03d.%03d.%03d",(int)(addr>>24 & 0xFF),(int)(addr>>16 & 0xFF),(int)(addr>>8 & 0xFF),(int)(addr & 0xFF));
	return addr_str;
}
/**
@brief	Converts a string containing an (Ipv4) Internet Protocol decimal dotted address into a 32bit address 
@return 	32bit address (Host Odering)
*/  
/**< dotted notation address string.  */
unsigned long inet_addr(unsigned char* addr)
{
	char i;
	unsigned long inetaddr = 0;
	char taddr[30];
	char * nexttok;
	int num;
	strcpy(taddr,(char*)addr);
	
	nexttok = taddr;
	for(i = 0; i < 4 ; i++)
	{
		nexttok = strtok(nexttok,".");
		if(nexttok[0] == '0' && nexttok[1] == 'x') num = atoi(nexttok+2,0x10);
		else num = ATOI(nexttok,10);
		inetaddr = inetaddr << 8;		
		inetaddr |= (num & 0xFF);
		nexttok = NULL;
	}
	return inetaddr;	
}
/**
@brief	Verify dotted notation IP address string
@return 	success - 1, fail - 0
*/ 
/**< pointer to IP address string */
char VerifyIPAddress(char* src)
{
	int i;
	int tnum;
	char tsrc[50];
	char* tok = tsrc;
	
	strcpy(tsrc,src);
	
	for(i = 0; i < 4; i++)
	{
		tok = strtok(tok,".");
		if ( !tok ) return 0;
		if(tok[0] == '0' && tok[1] == 'x')
		{
			if(!ValidATOI(tok+2,0x10,&tnum)) return 0;
		}
		else if(!ValidATOI(tok,10,&tnum)) return 0;
		
		if(tnum < 0 || tnum > 255) return 0;
		tok = NULL;
	}
	return 1;	
}
/**
@brief	Output destination IP address of appropriate channel
@return 	32bit destination address (Host Ordering)
*/ 
/**< Channel number which try to get destination IP Address */
unsigned long GetDestAddr(SOCKET s)
{
	unsigned long addr=0;
	int i = 0;
	for(i=0; i < 4; i++)
	{
		addr <<=8;
		addr += IINCHIP_READ(Sn_DIPR0(s)+i);
	}
	return addr;
}
/**
@brief	Output destination port number of appropriate channel
@return 	16bit destination port number
*/ 
/**< Channel number which try to get destination port */
unsigned int GetDestPort(SOCKET s)
{
	unsigned int port;
	port = ((unsigned int) IINCHIP_READ(Sn_DPORT0(s))) & 0x00FF;
	port <<= 8;
	port += ((unsigned int) IINCHIP_READ(Sn_DPORT0(s)+1)) & 0x00FF;
	return port;
}
// destip : BigEndian
unsigned char CheckDestInLocal(unsigned long destip)
{
	int i = 0;
	unsigned char * pdestip = (unsigned char*)&destip;
	for(i =0; i < 4; i++)
	{
		if((pdestip[i] & IINCHIP_READ(SUBR0+i)) != (IINCHIP_READ(SIPR0+i) & IINCHIP_READ(SUBR0+i)))
			return 1;	// Remote
	}
	return 0;
}

/**
@brief	Get handle of socket which status is same to 'status'
@return 	socket number
*/ 
/**< socket's status to be found */
/**< base of socket to be found */
SOCKET getSocket(unsigned char status, 	SOCKET start)
{
	SOCKET i;
	if(start > 3) start = 0;

	for(i = start; i < MAX_SOCK_NUM ; i++) if( getSn_SR(i)==status ) return i;
	return MAX_SOCK_NUM;	
}

/**
@brief	Calculate checksum of a stream
@return 	checksum
*/ 
/**< pointer to stream  */
/**< size of stream */
unsigned short checksum(unsigned char * src, 	unsigned int len)
{
	unsigned int sum, tsum, i, j;
	unsigned long lsum;
	j = len >> 1;
	lsum = 0;
	for (i = 0; i < j; i++) 
	{
		tsum = src[i * 2];
		tsum = tsum << 8;
		tsum += src[i * 2 + 1];
		lsum += tsum;
	}
	if (len % 2) 
	{
		tsum = src[i * 2];
		lsum += (tsum << 8);
	}
	sum = lsum;
	sum = ~(sum + (lsum >> 16));
	return (unsigned short) sum;	
}
/**
@brief	Get Source IP Address of iinChip.
@return 	Source IP Address(32bit Address-Host Ordering)
*/ 
unsigned long GetIPAddress(void)
{
	unsigned long ip=0;
	int i;
	for(i=0; i < 4; i++)
	{
		ip <<= 8;
		ip += (char)IINCHIP_READ(SIPR0+i);
	}
	return ip;
}
/**
@brief	Get Gateway IP Address of iinChip.
@return 	Gateway IP Address(32bit Address-Host Ordering)
*/ 
unsigned long GetGWAddress(void)
{
	unsigned long ip=0;
	int i;
	for(i=0; i < 4; i++)
	{
		ip <<= 8;
		ip += (char)IINCHIP_READ(GAR0+i);
	}
	return ip;	
}
/**
@brief	Get Subnet mask of iinChip.
@return 	Subnet Mask(32bit Address-Host Ordering)
*/ 
unsigned long GetSubMask(void)
{
	unsigned long ip=0;
	int i;
	for(i=0; i < 4; i++)
	{
		ip <<= 8;
		ip += (char)IINCHIP_READ(SUBR0+i);
	}
	return ip;	
}
/**
@brief	Get Mac Address of iinChip.
@return 	Subnet Mask(32bit Address-Host Ordering)
*/ 
/**< Pointer to store Mac Address(48bit Address)(INPUT, OUTPUT) */
void GetMacAddress(unsigned char* mac)
{
	int i = 0;
	for(i=0; i<6;i++)*mac++ = IINCHIP_READ(SHAR0+i);
}
/**/
void GetDestMacAddr(SOCKET s, unsigned char* mac)
{
	int i = 0;
	for(i=0; i<6;i++)*mac++ = IINCHIP_READ(Sn_DHAR0(s)+i);
}
/**
@brief	Read established network information(G/W, IP, S/N, Mac) of iinChip and Output that through Serial.
		Mac Address is output into format of Dotted HexaDecimal.Others are output into format of Dotted Decimal Format.
*/ 
void GetNetConfig(void)
{
	unsigned char addr[6];
	unsigned long iaddr;
	GetMacAddress(addr);
	iaddr = GetSubMask();
	iaddr = GetGWAddress();
	iaddr = GetIPAddress();
}
